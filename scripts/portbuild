#!/bin/sh
# $FreeBSD: ports/Tools/portbuild/scripts/portbuild,v 1.65 2011/01/23 02:39:54 linimon Exp $

# client-side script to do all the work surrounding an individual package
#     build, and then the package build itself

# note: unredirected 'echo' output goes to the journal file

# usage: $0 ARCH BRANCH BUILDID CHROOT [-noclean] [-norestr] [-noplistcheck] [-distfiles] [-fetch-original] [-trybroken] PKGNAME.tgz DIRNAME [DEPENDENCY.tgz ...]

pbd=${PORTBUILD_DATA:-/a/portbuild}

mount_fs()
{
    fs=$1
    mntpt=$2
    master=$3

    if [ ${disconnected} = 1 ]; then
	mount -t nullfs -r ${fs} ${mntpt}
    else
	mount_nfs -o ro -3 -i ${master}:${fs} ${mntpt}
    fi

    return $?
}

copypkg()
{
    pbd=$1
    host=$2
    from=$3
    to=$4
    http_proxy=$5

    if [ ${host} = $(hostname) ]; then
	cp ${pbd}/${arch}/${branch}/packages/All/${from} ${to}
    else
	if [ ! -z "${http_proxy}" ]; then
	    env HTTP_PROXY=${http_proxy} fetch -m -o ${to} http://${host}/errorlogs/${arch}-${branch}-packages-latest/All/${from}
	else
	    fetch -m -o ${to} http://${host}/errorlogs/${arch}-${branch}-packages-latest/All/${from}
	fi
    fi
}

bailout()
{
  jname=$1
  clean=$2
  error=$3
  pkgname=$4

  jail -r $jname
  echo -n "$pkgname failed unexpectedly on $(hostname) at "
  date

  exit $error
}

arch=$1
branch=$2
buildid=$3
chroot=$4
jname=${branch}-${chroot##*/}
shift 4

# Default niceness value
nice=0

if [ ! -d ${pbd}/${arch}/ ]; then
  bailout ${jname} 0 255 ${pkgname}
fi
. ${pbd}/${arch}/client.conf
. ${pbd}/${arch}/common.conf
# note: should NOT need anything from server.conf
. ${pbd}/${arch}/portbuild.conf
if [ -f ${pbd}/${arch}/${branch}/builds/${buildid}/portbuild.conf ]; then
    . ${pbd}/${arch}/${branch}/builds/${buildid}/portbuild.conf
fi
. ${pbd}/${arch}/portbuild.$(hostname)

# if buildenv isn't there, then ${pbd} is probably the default, which for
# some reason you have not populated.
if [ ! -f ${pbd}/scripts/buildenv ]; then
  bailout ${jname} 0 255 ${pkgname}
fi
. ${pbd}/scripts/buildenv

buildroot=${scratchdir}
error=0

clean=1
if [ "x$1" = "x-noclean" ]; then
  clean=0
  shift
fi
norestr=0
if [ "x$1" = "x-norestr" ]; then
  norestr=1
  # consumed by bsd.port.mk
  export NO_RESTRICTED=1
  shift
fi
noplistcheck=0
if [ "x$1" = "x-noplistcheck" ]; then
  noplistcheck=1
  # consumed by buildscript directly
  export NOPLISTCHECK=1
  shift
fi
nodistfiles=1
if [ "x$1" = "x-distfiles" ]; then
  # consumed by buildscript via make(1)
  export ALWAYS_KEEP_DISTFILES=1
  nodistfiles=0
  shift
fi
if [ "x$1" = "x-fetch-original" ]; then
  # consumed by buildscript via make(1)
  export FETCH_ORIGINAL=1
  shift
fi
if [ "x$1" = "x-trybroken" ]; then
  # consumed by bsd.port.mk
  export TRYBROKEN=1
  shift
fi

ED=$1
PD=$2
FD=$3
BD=$4
RD=$5
PKGD=$6

builddir=${pbd}/${arch}/${branch}/builds/${buildid}

buildenv.common $arch

# Want to use the /etc/make.conf in the chroot
unset __MAKE_CONF

# set overrides for make.conf
export BACKUP_FTP_SITE=${CLIENT_BACKUP_FTP_SITE}

pkgname=$(basename $7 ${pkg_sufx})
dirname=$8
shift 2

echo $pkgname
echo $dirname

# set overrides for bsd.port.mk variables
export WRKDIRPREFIX=${CLIENT_WRKDIRPREFIX}
export DISTDIR=${CLIENT_DISTDIR}
export LOCALBASE=${LOCALBASE}
export PACKAGES=${CLIENT_PACKAGES_LOCATION}
export SRC_BASE=${CLIENT_SRCBASE}
export PKG_SUFX=${pkg_sufx}

# to catch missing dependencies
#export DEPENDS_TARGET=/usr/bin/true

# don't pass -j, -k etc. to sub-makes
unset MAKEFLAGS
unset PORTSDIR

# wait 2 hours before killing build with no output
export BUILD_TIMEOUT=${CLIENT_BUILD_TIMEOUT}

# prevent runaway processes
ulimit -f ${CLIENT_ULIMIT_F}
ulimit -t ${CLIENT_ULIMIT_T}

# directories to clean
cleandirs="${LOCALBASE} /compat /var/db/pkg"

export FTP_TIMEOUT=${CLIENT_FTP_TIMEOUT}
export HTTP_TIMEOUT=${CLIENT_HTTP_TIMEOUT}

export PATH=/sbin:/bin:/usr/sbin:/usr/bin:${LOCALBASE}/sbin:${LOCALBASE}/bin

export MALLOC_OPTIONS=${CLIENT_MALLOC_OPTIONS}

echo "building ${pkgname} in ${chroot}"

bindist=${buildroot}/${branch}/${buildid}/tarballs/bindist.tar
bindistlocal=${buildroot}/${branch}/${buildid}/tarballs/bindist-$(hostname).tar
if [ ! -f $bindist ]; then
  bailout ${jname} ${clean} 255 ${pkgname}
fi

if [ -f ${chroot}/.notready ]; then
  tar -C ${chroot} -xpf ${bindist}
  if [ -f ${bindistlocal} ]; then
    tar -C ${chroot} -xpf ${bindistlocal}
  fi
  # jexec -U root will have the right arch in uname -m and uname -p
  LOGIN_ENV=",UNAME_p=${arch},UNAME_m=${arch}"
  sed -i "" -e "s/:\(setenv.*\):/:\1${LOGIN_ENV}:/" ${chroot}/etc/login.conf
  cap_mkdb ${chroot}/etc/login.conf

  cat >> ${chroot}/etc/make.conf << EOF
ARCH=${arch}
MACHINE=${arch}
MACHINE_ARCH=${arch}
EOF
  # allow additional (not replacement!) knobs for make.conf
  if [ -f ${builddir}/make.conf.client ]; then
      cat ${builddir}/make.conf.client >> ${chroot}/etc/make.conf
  fi

  # to be able to run certain kernel-dependent binaries
  # inside the chroot area
  cp -p /rescue/mount /rescue/umount ${chroot}/sbin
  cp -p /rescue/ps ${chroot}/bin

  rm ${chroot}/.notready
  touch ${chroot}/.ready
fi

trap "bailout ${jname} ${clean} ${error} ${pkgname}" 1 2 3 9 10 11 15

rm -rf ${chroot}/tmp/*
cd ${chroot}/tmp || bailout ${jname} ${clean} 255 ${pkgname}
mkdir -p depends distfiles packages || bailout ${jname} ${clean} 255 ${pkgname}

echo "building ${pkgname} on $(hostname)" | tee ${chroot}/tmp/${pkgname}.log
echo "in directory ${chroot}" | tee -a ${chroot}/tmp/${pkgname}.log

# intentionally set up ${PORTSDIR} with symlink to catch broken ports
mkdir -p ${chroot}/a/ports
rm -rf ${chroot}/usr/ports

# Don't build in a world-writable standard directory because some ports
# hardcode this path and try to load things from it at runtime, which is
# bad for user security
rm -rf ${chroot}/${WRKDIRPREFIX}
mkdir -p ${chroot}/${WRKDIRPREFIX}

# pick up value from <arch>/portbuild.conf
if [ ! -z "${ccache_dir}" ]; then
  mkdir -p ${chroot}/root/.ccache/
  # XXX MCL return value not checked
  if [ "${ccache_dir_nfs}" = "1" ]; then
    mount_nfs -o rw -T -3 ${ccache_dir} ${chroot}/root/.ccache/
  else
    mount -o rw -t nullfs ${ccache_dir} ${chroot}/root/.ccache/
  fi
fi

mount_fs ${builddir}/ports ${chroot}/a/ports ${CLIENT_NFS_MASTER} || bailout ${jname} ${clean} 255 ${pkgname}
ln -sf ../a/ports ${chroot}/usr/ports

mkdir -p ${chroot}/usr/src || bailout ${jname} ${clean} 255 ${pkgname}

mount_fs ${builddir}/src ${chroot}${CLIENT_SRCBASE} ${CLIENT_NFS_MASTER} || bailout ${jname} ${clean} 255 ${pkgname}

# set overrides for uname
buildenv.client ${arch} ${chroot}${CLIENT_SRCBASE}

mount -t devfs foo ${chroot}/dev
mount -t fdescfs fdesc ${chroot}/dev/fd
umount -f ${chroot}/compat/linux/proc > /dev/null 2>&1

# just in case...
for dir in ${cleandirs}; do
  if ! rm -rf ${chroot}${dir} >/dev/null 2>&1; then
    chflags -R noschg ${chroot}${dir}
    rm -rf ${chroot}${dir} >/dev/null 2>&1
  fi
done

rm -rf ${chroot}/var/db/pkg/*

mtree -deU -f ${chroot}/usr/src/etc/mtree/BSD.root.dist -p ${chroot} \
  >/dev/null 2>&1
mtree -deU -f ${chroot}/usr/src/etc/mtree/BSD.var.dist -p ${chroot}/var \
  >/dev/null 2>&1
mtree -deU -f ${chroot}/usr/src/etc/mtree/BSD.usr.dist -p ${chroot}/usr \
  >/dev/null 2>&1
mkdir -p ${chroot}${LOCALBASE}
mtree -deU -f ${chroot}/a/ports/Templates/BSD.local.dist -p ${chroot}${LOCALBASE} \
  >/dev/null 2>&1

for i in ${ARCHS_REQUIRING_LINPROCFS}; do
  if [ ${i} = ${arch} ]; then
    # JDK ports need linprocfs :(
    mkdir -p ${chroot}/compat/linux/proc || bailout ${jname} ${clean} 255 ${pkgname}
    mount -t linprocfs linprocfs ${chroot}/compat/linux/proc || bailout ${jname} ${clean} 255 ${pkgname}
    break
  fi
done

# Start a jail 
# XXX bapt: the network 127.0.0.1 allows ports like postfix do not fail querying a network
# device
jail -c persist name=${jname} ip4.addr=127.0.0.1 ip6=disable path=${chroot} \
	host.hostname=${jname} allow.sysvipc allow.socket_af allow.raw_sockets allow.chflags

jexec -U root ${jname} /usr/sbin/service ldconfig start

set x $ED $FD $PD $BD $RD $PKGD
shift 1
while [ $# -gt 0 ]; do
  # XXX MCL more hard-coding
  if [ ! -f ${chroot}/tmp/depends/$1 ]; then
    echo "copying package $1 for ${pkgname}"
    copypkg ${pbd} ${CLIENT_UPLOAD_HOST} $1 ${chroot}/tmp/depends "${http_proxy}"

    # Test for copy failure and bail
    # XXX MCL more hard-coding
    if [ ! -f ${chroot}/tmp/depends/$1 ]; then
      echo "ERROR: Couldn't copy $1" | tee -a ${chroot}/tmp/${pkgname}.log
      bailout ${jname} ${clean} 255 ${pkgname}
    fi
  fi
  shift
done

cp -p /tmp/${buildid}/scripts/buildscript ${chroot}

# phase 0, compile pnohang if necessary
if [ ! -f /tmp/${buildid}/sources/pnohang ]; then
  cp -p /tmp/${buildid}/sources/pnohang.c ${chroot}
  jexec -U root ${jname} /usr/bin/gcc -o /pnohang -Wall /pnohang.c 2>&1 | tee -a ${chroot}/tmp/${pkgname}.log
  if [ $? -ne 0 ]; then
    error=255
  else
    # XXX MCL 20121214 as a test, just delete this and add a chmod
    # chown ports-${arch} ${chroot}/pnohang
    chmod 555 ${chroot}/pnohang
    cp -p ${chroot}/pnohang /tmp/${buildid}/sources/
  fi
else
  cp -p /tmp/${buildid}/sources/pnohang ${chroot}
fi

if [ "${error}" = 0 ]; then
# phase 1, make checksum
# restart the jail with network for the fetch part
  jail -r ${jname}
  jail -c persist name=${jname} ip4=inherit ip6=inherit path=${chroot} \
	host.hostname=${jname} allow.sysvipc allow.socket_af allow.raw_sockets allow.chflags
  jexec -U root ${jname} /buildscript ${dirname} 1 "$ED" "$PD" "$FD" "$BD" "$RD" "$PKGD" 2>&1 | tee -a ${chroot}/tmp/${pkgname}.log
  jail -r ${jname}
  jail -c persist name=${jname} ip4.addr=127.0.0.1 ip6=disable path=${chroot} \
	host.hostname=${jname} allow.sysvipc allow.socket_af allow.raw_sockets allow.chflags
  if [ -f ${chroot}/tmp/status ]; then
    error=$(cat ${chroot}/tmp/status)
  else
    error=255
  fi
fi

if [ "${error}" = 0 ]; then
# make checksum succeeded
# phase 2, make package
  ln -sf ${pkgname}.log2 ${chroot}/tmp/make.log

  jexec -U root ${jname} /usr/bin/nice -n ${nice} /buildscript ${dirname} 2 "$ED" "$PD" "$FD" "$BD" "$RD" "$PKGD" > ${chroot}/tmp/${pkgname}.log2 2>&1

  grep pnohang ${chroot}/tmp/${pkgname}.log2
  cat ${chroot}/tmp/${pkgname}.log2 >> ${chroot}/tmp/${pkgname}.log
  rm ${chroot}/tmp/${pkgname}.log2
  error=$(cat ${chroot}/tmp/status)
fi

jail -r ${jname}
rm -rf ${chroot}/${WRKDIRPREFIX}

# Record build completion time for ganglia
echo "${arch} ${branch} ${buildid}" > ${buildroot}/stamp/${pkgname}

exit $error
