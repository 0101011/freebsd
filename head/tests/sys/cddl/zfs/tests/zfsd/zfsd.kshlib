#!/usr/local/bin/ksh93 -p
#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2013 Spectra Logic.  All rights reserved.
# Use is subject to license terms.
#

# Common routines used by multiple zfsd tests

function wait_for_disk_to_reappear
{
	typeset -i timeout=$1
	typeset EXPANDER=$2
	typeset PHY=$3

	for ((; $timeout > 0; timeout=$timeout-1)); do
		find_disk_by_phy $EXPANDER $PHY
		[ -n "$FOUNDDISK" -a -e "/dev/$FOUNDDISK" ] && return
		$SLEEP 1
	done
	log_fail "ERROR: Disk at ${EXPANDER}:${PHY} never reappeared"
}

function wait_for_pool_dev_state_change
{
	typeset -i timeout=$1
	typeset disk=$2
	typeset state=$3

	log_note "Waiting up to $timeout seconds for $disk to become $state ..."
	for ((; $timeout > 0; timeout=$timeout-1)); do
		check_state $TESTPOOL "$disk" "$state"
		[ $? -eq 0 ] && return
		$SLEEP 1
	done
	log_must $ZPOOL status $TESTPOOL
	log_fail "ERROR: Disk $disk not marked as $state in $TESTPOOL"
}

function wait_for_pool_removal
{
	typeset -i timeout=$1
	wait_for_pool_dev_state_change $timeout $REMOVAL_DISK REMOVED
}

function wait_until_scrubbed
{
	typeset pool=$1

	while is_pool_scrubbing $pool; do
		log_note "$pool still scrubbing..."
		$SLEEP 1
	done
}

function corrupt_pool_vdev
{
	typeset pool=$1
	typeset vdev=$2
	typeset file=$3

	# do some IO on the pool
	log_must $DD if=/dev/zero of=$file bs=1024k count=128
	# scribble on the underlying file to corrupt the vdev
	log_must $DD if=/dev/urandom of=$vdev bs=1024k count=64 conv=notrunc

	# Scrub the pool to detect the corruption
	$SYNC
	log_must $ZPOOL scrub $pool
	wait_until_scrubbed $pool

	# ZFSD can take up to 60 seconds to degrade an array in response to
	# errors (though it's usually faster).  
	wait_for_pool_dev_state_change 60 $vdev DEGRADED
}

#
# do_autoreplace
# Common code that walks through an autoreplace scenario
# Does not verify the final behavior
#
# $1	spare disk name.  Empty if no spare
#
function do_autoreplace
{
	typeset SPARE_DISK=$1

	# Remove a vdev by disabling its SAS phy
	find_verify_sas_disk $REMOVAL_DISK
	log_note "Disabling \"$REMOVAL_DISK\" on expander $EXPANDER phy $PHY"
	disable_sas_disk $EXPANDER $PHY

	# Check to make sure the disk is gone
	log_mustnot camcontrol inquiry $REMOVAL_DISK

	# Check to make sure ZFS sees the disk as removed
	wait_for_pool_removal 30

	if [ -n "$SPARE_DISK" ]; then
		# Verify that the spare activates
		for ((timeout=0; $timeout<10; timeout=$timeout+1)); do
			check_state $TESTPOOL $SPARE_DISK "ONLINE" && break
			$SLEEP 6
		done
		log_must check_state $TESTPOOL "$SPARE_DISK" "ONLINE"

		wait_until_resilvered
	fi

	# Export the pool
	# This is to prevent REMOVAL_DISK from being added to the pool when
	# we reenable its phy
	log_must $ZPOOL export $TESTPOOL

	# Reenable the missing dev's SAS phy
	log_note "Reenabling phy on expander $EXPANDER phy $PHY"
	enable_sas_disk $EXPANDER $PHY
	rescan_disks $EXPANDER
	wait_for_disk_to_reappear 30 $EXPANDER $PHY

	# Erase the missing dev's ZFS label
	log_must $ZPOOL labelclear -f $( find_disks $FOUNDDISK )

	# Disable the missing dev's SAS phy again
	find_verify_sas_disk $FOUNDDISK
	log_note "Disabling \"$FOUNDDISK\" on expander $EXPANDER phy $PHY"
	disable_sas_disk $EXPANDER $PHY

	# Check to make sure the disk is gone
	log_mustnot camcontrol inquiry $REMOVAL_DISK

	# Import the pool
	log_must $ZPOOL import $TESTPOOL
	# Wait 5 seconds before enabling the phy so zfsd.log will be easier
	# to interpret
	$SLEEP 5

	# Reenable the missing dev's SAS phy
	log_note "Reenabling phy on expander $EXPANDER phy $PHY"
	enable_sas_disk $EXPANDER $PHY
	rescan_disks $EXPANDER
	wait_for_disk_to_reappear 30 $EXPANDER $PHY
}

function autoreplace_cleanup
{
	destroy_pool $TESTPOOL

	# See if the phy has been disabled, and try to re-enable it if possible.
	if [ -n "$REMOVAL_DISK" -a -n "$EXPANDER" -a -n "$PHY" ]; then
		log_note "Renabling ${EXPANDER}:${PHY} for disk ${REMOVAL_DISK}"
		enable_sas_disk $EXPANDER $PHY
		rescan_disks $EXPANDER

		# For debugging purposes, log the partial output of
		# camcontrol to see if the disk actually came back.
		out=$(camcontrol smpphylist ${EXPANDER} | ${GREP} "^ *${PHY}")
		log_note "Expander has: ${out}"
	fi

	[[ -e $TESTDIR ]] && log_must $RM -rf $TESTDIR/*

	partition_cleanup
	restart_zfsd
}
